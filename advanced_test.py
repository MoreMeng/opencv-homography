#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HomographyMatcher
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
"""

import cv2
import numpy as np
import os
import time
from homography_matcher import HomographyMatcher


def create_realistic_test_images():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    """
    print("üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á...")

    os.makedirs("test_images", exist_ok=True)

    # ‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (Top-Down) ‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    map_img = np.ones((800, 1000, 3), dtype=np.uint8) * 240  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô

    # ‡∏ß‡∏≤‡∏î‡∏ñ‡∏ô‡∏ô‡πÉ‡∏´‡∏ç‡πà
    cv2.rectangle(map_img, (0, 350), (1000, 450), (160, 160, 160), -1)  # ‡∏ñ‡∏ô‡∏ô‡∏´‡∏•‡∏±‡∏Å
    cv2.rectangle(map_img, (450, 0), (550, 800), (160, 160, 160), -1)  # ‡∏ñ‡∏ô‡∏ô‡∏ï‡∏±‡∏î

    # ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡∏ô‡∏ô
    for x in range(50, 1000, 100):
        cv2.rectangle(map_img, (x, 390), (x+40, 410), (255, 255, 255), -1)
    for y in range(50, 800, 100):
        cv2.rectangle(map_img, (490, y), (510, y+40), (255, 255, 255), -1)

    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ
    buildings = [
        ((100, 100), (250, 300), (180, 140, 100)),  # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
        ((300, 150), (400, 320), (120, 150, 180)),  # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
        ((600, 100), (780, 280), (100, 180, 120)),  # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        ((150, 500), (320, 700), (200, 120, 100)),  # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏µ‡∏™‡πâ‡∏°
        ((600, 500), (750, 750), (150, 150, 200)),  # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏µ‡∏ü‡πâ‡∏≤
    ]

    for (x1, y1), (x2, y2), color in buildings:
        cv2.rectangle(map_img, (x1, y1), (x2, y2), color, -1)
        cv2.rectangle(map_img, (x1, y1), (x2, y2), (0, 0, 0), 2)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        for i in range(3):
            for j in range(5):
                wx = x1 + 20 + j * 30
                wy = y1 + 30 + i * 40
                if wx < x2-10 and wy < y2-10:
                    cv2.rectangle(map_img, (wx, wy), (wx+15, wy+20), (255, 255, 0), -1)
                    cv2.rectangle(map_img, (wx, wy), (wx+15, wy+20), (0, 0, 0), 1)

    # ‡∏•‡∏≤‡∏ô‡∏à‡∏≠‡∏î‡∏£‡∏ñ
    cv2.rectangle(map_img, (820, 300), (980, 500), (200, 200, 200), -1)
    for i in range(8):
        cv2.line(map_img, (830, 320 + i*20), (970, 320 + i*20), (255, 255, 255), 1)

    # ‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
    cv2.circle(map_img, (200, 600), 80, (100, 200, 100), -1)  # ‡∏™‡∏ß‡∏ô
    # ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏™‡∏ß‡∏ô
    for i in range(5):
        for j in range(5):
            x = 160 + i * 20
            y = 560 + j * 20
            if (x-200)**2 + (y-600)**2 < 60**2:
                cv2.circle(map_img, (x, y), 8, (50, 150, 50), -1)

    # ‡∏™‡∏∞‡∏û‡∏≤‡∏ô
    cv2.rectangle(map_img, (440, 340), (560, 460), (139, 69, 19), -1)
    cv2.rectangle(map_img, (440, 340), (560, 460), (255, 255, 255), 3)

    # ‡∏õ‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
    cv2.circle(map_img, (500, 200), 30, (255, 0, 0), -1)  # ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    cv2.circle(map_img, (500, 200), 30, (255, 255, 255), 3)
    cv2.putText(map_img, "LANDMARK", (450, 290), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 2)

    cv2.imwrite("test_images/detailed_map.jpg", map_img)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û Street View ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    street_img = np.ones((600, 800, 3), dtype=np.uint8) * 200  # ‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤

    # ‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏Ü
    cv2.rectangle(street_img, (0, 0), (800, 200), (220, 220, 180), -1)
    cv2.ellipse(street_img, (200, 150), (80, 30), 0, 0, 360, (255, 255, 255), -1)
    cv2.ellipse(street_img, (600, 100), (60, 25), 0, 0, 360, (255, 255, 255), -1)

    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á street view (perspective)
    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡πâ‡∏≤‡∏¢
    left_building = np.array([[0, 200], [150, 180], [150, 550], [0, 600]], np.int32)
    cv2.fillPoly(street_img, [left_building], (180, 140, 100))
    cv2.polylines(street_img, [left_building], True, (0, 0, 0), 2)

    # ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡πâ‡∏≤‡∏¢
    for i in range(3):
        for j in range(8):
            wx = 20 + j * 15
            wy = 220 + i * 50
            cv2.rectangle(street_img, (wx, wy), (wx+10, wy+20), (255, 255, 0), -1)
            cv2.rectangle(street_img, (wx, wy), (wx+10, wy+20), (0, 0, 0), 1)

    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏ß‡∏≤
    right_building = np.array([[650, 180], [800, 200], [800, 600], [650, 550]], np.int32)
    cv2.fillPoly(street_img, [right_building], (120, 150, 180))
    cv2.polylines(street_img, [right_building], True, (0, 0, 0), 2)

    # ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏ß‡∏≤
    for i in range(3):
        for j in range(6):
            wx = 670 + j * 18
            wy = 220 + i * 50
            cv2.rectangle(street_img, (wx, wy), (wx+12, wy+20), (255, 255, 0), -1)
            cv2.rectangle(street_img, (wx, wy), (wx+12, wy+20), (0, 0, 0), 1)

    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á (‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - landmark)
    center_building = np.array([[300, 160], [500, 150], [500, 500], [300, 520]], np.int32)
    cv2.fillPoly(street_img, [center_building], (100, 180, 120))
    cv2.polylines(street_img, [center_building], True, (0, 0, 0), 3)

    # ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ö‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á
    cv2.circle(street_img, (400, 200), 25, (255, 0, 0), -1)
    cv2.circle(street_img, (400, 200), 25, (255, 255, 255), 3)
    cv2.putText(street_img, "LANDMARK", (340, 320), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)

    # ‡∏ñ‡∏ô‡∏ô (perspective view)
    road_pts = np.array([[0, 500], [800, 450], [800, 600], [0, 600]], np.int32)
    cv2.fillPoly(street_img, [road_pts], (120, 120, 120))

    # ‡πÄ‡∏™‡πâ‡∏ô‡∏ñ‡∏ô‡∏ô
    cv2.line(street_img, (0, 525), (800, 490), (255, 255, 255), 3)
    cv2.line(street_img, (0, 575), (800, 530), (255, 255, 255), 3)

    # ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡∏ô‡∏ô (‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞)
    for i in range(8):
        x1 = i * 100
        x2 = (i + 1) * 100 - 20
        y1 = 550 - i * 5
        y2 = 550 - (i + 1) * 5 + 1
        cv2.line(street_img, (x1, y1), (x2, y2), (255, 255, 0), 2)

    # ‡πÑ‡∏ü‡∏à‡∏£‡∏≤‡∏à‡∏£
    cv2.rectangle(street_img, (180, 300), (200, 500), (100, 100, 100), -1)
    cv2.circle(street_img, (190, 320), 8, (255, 0, 0), -1)
    cv2.circle(street_img, (190, 340), 8, (255, 255, 0), -1)
    cv2.circle(street_img, (190, 360), 8, (0, 255, 0), -1)

    # ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
    cv2.line(street_img, (250, 450), (250, 500), (139, 69, 19), 8)
    cv2.circle(street_img, (250, 450), 25, (50, 150, 50), -1)

    cv2.line(street_img, (550, 420), (550, 480), (139, 69, 19), 6)
    cv2.circle(street_img, (550, 420), 20, (50, 150, 50), -1)

    cv2.imwrite("test_images/street_view.jpg", street_img)

    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß:")
    print("   üìÅ test_images/detailed_map.jpg")
    print("   üìÅ test_images/street_view.jpg")


def benchmark_detectors():
    """
    ‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á feature detectors ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    """
    print("\n" + "="*60)
    print("‚è±Ô∏è  ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Feature Detectors")
    print("="*60)

    detectors = ['SIFT', 'ORB', 'AKAZE']
    results = {}

    for detector in detectors:
        print(f"\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {detector}...")

        start_time = time.time()
        try:
            matcher = HomographyMatcher(feature_detector=detector, min_match_count=15)
            result = matcher.compare_images(
                "test_images/street_view.jpg",
                "test_images/detailed_map.jpg",
                f"test_output/{detector.lower()}_benchmark"
            )
            end_time = time.time()

            result['processing_time'] = end_time - start_time
            results[detector] = result

            print(f"   ‚è±Ô∏è  ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {result['processing_time']:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

        except Exception as e:
            print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            results[detector] = None

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
    print("\n" + "="*80)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    print("="*80)
    print(f"{'Detector':<10} {'Time(s)':<10} {'KP1':<8} {'KP2':<8} {'Matches':<10} {'Success':<10} {'Score':<8}")
    print("-" * 80)

    for detector, result in results.items():
        if result:
            success = "‚úÖ Yes" if result['homography_found'] else "‚ùå No"
            score = f"{result['confidence_score']:.2f}" if result['homography_found'] else "0.00"
            print(f"{detector:<10} {result['processing_time']:<10.2f} {result['eye_level_keypoints']:<8} "
                  f"{result['top_down_keypoints']:<8} {result['total_matches']:<10} {success:<10} {score:<8}")
        else:
            print(f"{detector:<10} {'Error':<10} {'---':<8} {'---':<8} {'---':<10} {'‚ùå No':<10} {'0.00':<8}")

    return results


def test_with_transformations():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ transform ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    """
    print("\n" + "="*60)
    print("üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Transform ‡∏ï‡πà‡∏≤‡∏á‡πÜ")
    print("="*60)

    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
    base_img = cv2.imread("test_images/street_view.jpg")
    if base_img is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
        return

    os.makedirs("test_images/transforms", exist_ok=True)

    transformations = {
        'rotated': {'angle': 15, 'description': '‡∏´‡∏°‡∏∏‡∏ô 15 ‡∏≠‡∏á‡∏®‡∏≤'},
        'scaled': {'scale': 0.8, 'description': '‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î 80%'},
        'perspective': {'points': 'custom', 'description': '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô perspective'},
        'noisy': {'noise': True, 'description': '‡πÄ‡∏û‡∏¥‡πà‡∏° noise'},
        'bright': {'brightness': 50, 'description': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á'}
    }

    h, w = base_img.shape[:2]

    for transform_name, params in transformations.items():
        print(f"\nüîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û {params['description']}...")

        if transform_name == 'rotated':
            # ‡∏´‡∏°‡∏∏‡∏ô‡∏†‡∏≤‡∏û
            center = (w//2, h//2)
            rotation_matrix = cv2.getRotationMatrix2D(center, params['angle'], 1.0)
            transformed = cv2.warpAffine(base_img, rotation_matrix, (w, h))

        elif transform_name == 'scaled':
            # ‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î
            new_w, new_h = int(w * params['scale']), int(h * params['scale'])
            scaled = cv2.resize(base_img, (new_w, new_h))
            transformed = np.zeros_like(base_img)
            offset_x, offset_y = (w - new_w) // 2, (h - new_h) // 2
            transformed[offset_y:offset_y+new_h, offset_x:offset_x+new_w] = scaled

        elif transform_name == 'perspective':
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô perspective
            src_pts = np.float32([[0, 0], [w, 0], [w, h], [0, h]])
            dst_pts = np.float32([[50, 30], [w-30, 50], [w-80, h-30], [80, h-50]])
            perspective_matrix = cv2.getPerspectiveTransform(src_pts, dst_pts)
            transformed = cv2.warpPerspective(base_img, perspective_matrix, (w, h))

        elif transform_name == 'noisy':
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° noise
            noise = np.random.normal(0, 25, base_img.shape).astype(np.uint8)
            transformed = cv2.add(base_img, noise)

        elif transform_name == 'bright':
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
            transformed = cv2.convertScaleAbs(base_img, alpha=1.0, beta=params['brightness'])

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
        transform_path = f"test_images/transforms/{transform_name}_street.jpg"
        cv2.imwrite(transform_path, transformed)

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
        try:
            matcher = HomographyMatcher(feature_detector='SIFT', min_match_count=10)
            result = matcher.compare_images(
                transform_path,
                "test_images/detailed_map.jpg",
                f"test_output/transform_{transform_name}"
            )

            if result['homography_found']:
                print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Score: {result['confidence_score']:.2f}")
            else:
                print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (Matches: {result['total_matches']})")

        except Exception as e:
            print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""

    print("üß™ OpenCV Homography Matcher - ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á")
    print("="*60)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    create_realistic_test_images()

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    benchmark_results = benchmark_detectors()

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ transform
    test_with_transformations()

    print("\n" + "="*60)
    print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    print("="*60)
    print("üìÅ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("   - test_output/sift_benchmark/")
    print("   - test_output/orb_benchmark/")
    print("   - test_output/akaze_benchmark/")
    print("   - test_output/transform_*/")
    print("\nüí° ‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï:")
    print("   - SIFT ‡∏°‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    print("   - ORB ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡πà‡∏≥")
    print("   - AKAZE ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")


if __name__ == "__main__":
    main()

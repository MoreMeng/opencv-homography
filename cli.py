#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Command Line Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OpenCV Homography Matcher
‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û Eye-Level ‡∏Å‡∏±‡∏ö Top-Down
"""

import argparse
import sys
import os
from homography_matcher import HomographyMatcher


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CLI"""

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á argument parser
    parser = argparse.ArgumentParser(
        description='üîç OpenCV Homography Matcher - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û Eye-Level ‡∏Å‡∏±‡∏ö Top-Down',
        epilog='‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n'
               '  python cli.py --eye eye_level.jpg --top top_down.jpg\n'
               '  python cli.py --eye street.jpg --top map.jpg --detector ORB --output results',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
    parser.add_argument('--eye', '--eye-level',
                       dest='eye_level',
                       required=True,
                       help='üì∑ ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û Eye-Level (‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏≤)')

    parser.add_argument('--top', '--top-down',
                       dest='top_down',
                       required=True,
                       help='üó∫Ô∏è  ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û Top-Down (‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)')

    # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°
    parser.add_argument('--detector',
                       choices=['SIFT', 'ORB', 'AKAZE'],
                       default='SIFT',
                       help='üîé Feature detector ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (default: SIFT)')

    parser.add_argument('--min-matches',
                       type=int,
                       default=10,
                       help='üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (default: 10)')

    parser.add_argument('--output', '-o',
                       default='results',
                       help='üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (default: results)')

    parser.add_argument('--verbose', '-v',
                       action='store_true',
                       help='üìù ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°')

    parser.add_argument('--benchmark',
                       action='store_true',
                       help='‚è±Ô∏è  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á detectors ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')

    # Parse arguments
    args = parser.parse_args()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå input
    if not os.path.exists(args.eye_level):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û Eye-Level: {args.eye_level}")
        return 1

    if not os.path.exists(args.top_down):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û Top-Down: {args.top_down}")
        return 1

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    print("üîç OpenCV Homography Matcher")
    print("=" * 50)
    print(f"üì∑ Eye-Level Image: {args.eye_level}")
    print(f"üó∫Ô∏è  Top-Down Image: {args.top_down}")
    print(f"üîé Feature Detector: {args.detector}")
    print(f"üî¢ Min Matches: {args.min_matches}")
    print(f"üìÅ Output Directory: {args.output}")
    print("=" * 50)

    try:
        if args.benchmark:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å detectors
            print("‚è±Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á detectors ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n")

            detectors = ['SIFT', 'ORB', 'AKAZE']
            results = {}

            for detector in detectors:
                print(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {detector}...")

                try:
                    matcher = HomographyMatcher(
                        feature_detector=detector,
                        min_match_count=args.min_matches
                    )

                    result = matcher.compare_images(
                        args.eye_level,
                        args.top_down,
                        f"{args.output}/{detector.lower()}_results"
                    )

                    results[detector] = result

                    if result['homography_found']:
                        print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Score: {result['confidence_score']:.2f}")
                    else:
                        print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (Matches: {result['total_matches']})")

                except Exception as e:
                    print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
                    results[detector] = None

                print()

            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
            print("-" * 60)
            print(f"{'Detector':<10} {'Keypoints':<15} {'Matches':<10} {'Success':<10} {'Score':<8}")
            print("-" * 60)

            for detector, result in results.items():
                if result:
                    kp_info = f"{result['eye_level_keypoints']}/{result['top_down_keypoints']}"
                    success = "‚úÖ Yes" if result['homography_found'] else "‚ùå No"
                    score = f"{result['confidence_score']:.2f}" if result['homography_found'] else "0.00"
                    print(f"{detector:<10} {kp_info:<15} {result['total_matches']:<10} {success:<10} {score:<8}")
                else:
                    print(f"{detector:<10} {'Error':<15} {'Error':<10} {'‚ùå No':<10} {'0.00':<8}")

        else:
            # ‡πÉ‡∏ä‡πâ detector ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
            print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡πâ‡∏ß‡∏¢ {args.detector}...\n")

            matcher = HomographyMatcher(
                feature_detector=args.detector,
                min_match_count=args.min_matches
            )

            result = matcher.compare_images(
                args.eye_level,
                args.top_down,
                args.output
            )

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
            print("\n" + "=" * 50)
            print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
            print("=" * 50)
            print(f"üîé Feature Detector: {args.detector}")
            print(f"üìä Eye-Level Keypoints: {result['eye_level_keypoints']}")
            print(f"üìä Top-Down Keypoints: {result['top_down_keypoints']}")
            print(f"üîó Total Matches: {result['total_matches']}")

            if result['homography_found']:
                print(f"‚úÖ Inlier Matches: {result['inlier_matches']}")
                print(f"üéØ Confidence Score: {result['confidence_score']:.2f}")
                print("\nüéâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                print(f"üìÅ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô: {args.output}")

                # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•
                if result['confidence_score'] >= 0.7:
                    print("üíö ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ: ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠")
                elif result['confidence_score'] >= 0.5:
                    print("üíõ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ: ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                elif result['confidence_score'] >= 0.3:
                    print("üß° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ: ‡∏ï‡πà‡∏≥ - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
                else:
                    print("‚ù§Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ: ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å - ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")

            else:
                print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á")
                print("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
                print("   - ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô feature detector (--detector ORB ‡∏´‡∏£‡∏∑‡∏≠ AKAZE)")
                print("   - ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô min matches (--min-matches 5)")
                print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")

        print(f"\nüìÇ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
        print(f"   ‚Ä¢ matches_visualization.jpg - ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà features")
        print(f"   ‚Ä¢ comparison.jpg - ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å transform")
        print(f"   ‚Ä¢ transformed_eye_level.jpg - ‡∏†‡∏≤‡∏û eye-level ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å transform")

        return 0

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        return 1

    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

        if args.verbose:
            import traceback
            print("\nüîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:")
            traceback.print_exc()

        return 1


if __name__ == "__main__":
    exit(main())

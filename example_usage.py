#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô HomographyMatcher ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û Eye-Level ‡∏Å‡∏±‡∏ö Top-Down
"""

import cv2
import numpy as np
import os
from homography_matcher import HomographyMatcher


def create_sample_images():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    """
    print("üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    os.makedirs("sample_images", exist_ok=True)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û Top-Down (‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)
    top_down = np.ones((600, 800, 3), dtype=np.uint8) * 50

    # ‡∏ß‡∏≤‡∏î‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á top-down
    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 1 (‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°)
    cv2.rectangle(top_down, (100, 100), (300, 250), (100, 150, 200), -1)
    cv2.rectangle(top_down, (100, 100), (300, 250), (255, 255, 255), 2)

    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 2
    cv2.rectangle(top_down, (450, 150), (650, 300), (150, 200, 100), -1)
    cv2.rectangle(top_down, (450, 150), (650, 300), (255, 255, 255), 2)

    # ‡∏ñ‡∏ô‡∏ô
    cv2.rectangle(top_down, (0, 350), (800, 400), (80, 80, 80), -1)
    # ‡πÄ‡∏™‡πâ‡∏ô‡∏ñ‡∏ô‡∏ô
    for x in range(50, 800, 100):
        cv2.line(top_down, (x, 375), (x + 50, 375), (255, 255, 255), 2)

    # ‡∏•‡∏≤‡∏ô‡∏à‡∏≠‡∏î‡∏£‡∏ñ
    cv2.rectangle(top_down, (120, 450), (280, 550), (120, 120, 120), -1)
    # ‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏≠‡∏î‡∏£‡∏ñ
    for y in range(460, 540, 20):
        cv2.line(top_down, (130, y), (270, y), (255, 255, 255), 1)

    # ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (‡∏ß‡∏á‡∏Å‡∏•‡∏°)
    cv2.circle(top_down, (350, 400), 20, (50, 150, 50), -1)
    cv2.circle(top_down, (500, 450), 25, (50, 150, 50), -1)
    cv2.circle(top_down, (200, 320), 15, (50, 150, 50), -1)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏° features ‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô
    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÉ‡∏´‡∏ç‡πà)
    cv2.circle(top_down, (400, 250), 40, (200, 200, 50), -1)
    cv2.circle(top_down, (400, 250), 40, (255, 255, 255), 3)
    cv2.putText(top_down, "STATION", (360, 255), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

    cv2.imwrite("sample_images/top_down_view.jpg", top_down)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û Eye-Level (‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏≤)
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏Ñ‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ perspective transformation
    eye_level = np.ones((400, 600, 3), dtype=np.uint8) * 80

    # ‡∏ß‡∏≤‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤
    cv2.rectangle(eye_level, (0, 0), (600, 150), (180, 180, 120), -1)

    # ‡∏ß‡∏≤‡∏î‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏≤
    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 1 (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏á)
    points1 = np.array([[50, 150], [150, 120], [150, 350], [50, 380]], np.int32)
    cv2.fillPoly(eye_level, [points1], (100, 150, 200))
    cv2.polylines(eye_level, [points1], True, (255, 255, 255), 2)

    # ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ 2
    points2 = np.array([[200, 140], [300, 110], [300, 340], [200, 370]], np.int32)
    cv2.fillPoly(eye_level, [points2], (150, 200, 100))
    cv2.polylines(eye_level, [points2], True, (255, 255, 255), 2)

    # ‡∏ñ‡∏ô‡∏ô (‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏≤)
    road_points = np.array([[0, 350], [600, 320], [600, 400], [0, 400]], np.int32)
    cv2.fillPoly(eye_level, [road_points], (80, 80, 80))

    # ‡πÄ‡∏™‡πâ‡∏ô‡∏ñ‡∏ô‡∏ô (perspective)
    for i in range(5):
        x1 = i * 100
        x2 = 600
        y1 = 360
        y2 = 340 + i * 5
        cv2.line(eye_level, (x1, y1), (x2, y2), (255, 255, 255), 2)

    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ (‡πÉ‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á eye-level)
    station_points = np.array([[350, 130], [450, 110], [450, 300], [350, 320]], np.int32)
    cv2.fillPoly(eye_level, [station_points], (200, 200, 50))
    cv2.polylines(eye_level, [station_points], True, (255, 255, 255), 3)
    cv2.putText(eye_level, "STATION", (360, 220), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

    # ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á eye-level)
    # ‡∏ï‡πâ‡∏ô 1
    cv2.line(eye_level, (480, 300), (480, 350), (139, 69, 19), 5)
    cv2.circle(eye_level, (480, 300), 20, (50, 150, 50), -1)

    # ‡∏ï‡πâ‡∏ô 2
    cv2.line(eye_level, (120, 320), (120, 370), (139, 69, 19), 4)
    cv2.circle(eye_level, (120, 320), 15, (50, 150, 50), -1)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ features ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    # ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    for i in range(2):
        for j in range(8):
            cv2.rectangle(eye_level, (70 + j*10, 170 + i*30), (75 + j*10, 190 + i*30), (255, 255, 0), -1)
            cv2.rectangle(eye_level, (220 + j*10, 160 + i*30), (225 + j*10, 180 + i*30), (255, 255, 0), -1)

    cv2.imwrite("sample_images/eye_level_view.jpg", eye_level)

    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß:")
    print("   üìÅ sample_images/top_down_view.jpg")
    print("   üìÅ sample_images/eye_level_view.jpg")


def run_basic_comparison():
    """
    ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    """
    print("\n" + "="*60)
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ SIFT + Homography")
    print("="*60)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á matcher
    matcher = HomographyMatcher(feature_detector='SIFT', min_match_count=8)

    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û
    results = matcher.compare_images(
        "sample_images/eye_level_view.jpg",
        "sample_images/top_down_view.jpg",
        "output/sift_results"
    )

    return results


def run_multiple_detectors():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ feature detectors ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    """
    print("\n" + "="*60)
    print("üî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Feature Detectors ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
    print("="*60)

    detectors = ['SIFT', 'ORB', 'AKAZE']
    all_results = {}

    for detector in detectors:
        print(f"\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ {detector}...")
        try:
            matcher = HomographyMatcher(feature_detector=detector, min_match_count=8)
            results = matcher.compare_images(
                "sample_images/eye_level_view.jpg",
                "sample_images/top_down_view.jpg",
                f"output/{detector.lower()}_results"
            )
            all_results[detector] = results
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö {detector}: {str(e)}")
            all_results[detector] = None

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("\n" + "="*60)
    print("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Feature Detectors ‡∏ï‡πà‡∏≤‡∏á‡πÜ")
    print("="*60)
    print(f"{'Detector':<10} {'Keypoints1':<12} {'Keypoints2':<12} {'Matches':<10} {'Success':<10} {'Score':<10}")
    print("-" * 70)

    for detector, results in all_results.items():
        if results:
            success = "‚úÖ Yes" if results['homography_found'] else "‚ùå No"
            score = f"{results['confidence_score']:.2f}" if results['homography_found'] else "0.00"
            print(f"{detector:<10} {results['eye_level_keypoints']:<12} {results['top_down_keypoints']:<12} "
                  f"{results['total_matches']:<10} {success:<10} {score:<10}")
        else:
            print(f"{detector:<10} {'Error':<12} {'Error':<12} {'Error':<10} {'‚ùå No':<10} {'0.00':<10}")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""

    print("üéØ OpenCV Homography Matcher - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    print("="*60)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    create_sample_images()

    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    basic_results = run_basic_comparison()

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö detectors ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    run_multiple_detectors()

    print("\n" + "="*60)
    print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    print("="*60)
    print("üìÅ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:")
    print("   - output/sift_results/")
    print("   - output/orb_results/")
    print("   - output/akaze_results/")
    print("\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    print("   - ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå matches_visualization.jpg ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà features")
    print("   - ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå comparison.jpg ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£ transform")
    print("   - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OpenCV Homography Matcher ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
"""

import cv2
import numpy as np
from homography_matcher import HomographyMatcher
import os


def simple_demo():
    """
    ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
    """
    print("üéØ OpenCV Homography Matcher - ‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢")
    print("=" * 60)
    print("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û Eye-Level ‡∏Å‡∏±‡∏ö Top-Down")
    print("‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á")
    print("=" * 60)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    sample_paths = [
        ("sample_images/eye_level_view.jpg", "sample_images/top_down_view.jpg", "‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"),
        ("real_examples/campus_street_view.jpg", "real_examples/campus_map.jpg", "‡∏†‡∏≤‡∏û‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"),
        ("real_examples/mall_interior.jpg", "real_examples/mall_map.jpg", "‡∏†‡∏≤‡∏û‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
    ]

    available_samples = []
    for eye_path, top_path, description in sample_paths:
        if os.path.exists(eye_path) and os.path.exists(top_path):
            available_samples.append((eye_path, top_path, description))

    if not available_samples:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô:")
        print("   python example_usage.py")
        print("   python create_realistic_examples.py")
        return

    print("üì∑ ‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    for i, (_, _, description) in enumerate(available_samples, 1):
        print(f"   {i}. {description}")

    print("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")

    results_summary = []

    for i, (eye_path, top_path, description) in enumerate(available_samples, 1):
        print(f"\nüìç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {i}: {description}")
        print("-" * 40)

        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö detectors ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        detectors = ['SIFT', 'ORB', 'AKAZE']
        best_result = None
        best_detector = None
        best_score = 0

        for detector in detectors:
            try:
                print(f"   üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ {detector}...", end="")

                matcher = HomographyMatcher(
                    feature_detector=detector,
                    min_match_count=5  # ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
                )

                output_dir = f"demo_results/test_{i}_{detector.lower()}"
                result = matcher.compare_images(eye_path, top_path, output_dir)

                if result['homography_found'] and result['confidence_score'] > best_score:
                    best_result = result
                    best_detector = detector
                    best_score = result['confidence_score']

                if result['homography_found']:
                    print(f" ‚úÖ Score: {result['confidence_score']:.2f}")
                else:
                    print(f" ‚ùå Matches: {result['total_matches']}")

            except Exception as e:
                print(f" ‚ùå Error")

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        if best_result:
            print(f"   üèÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {best_detector} (Score: {best_score:.2f})")
            results_summary.append({
                'test': description,
                'detector': best_detector,
                'score': best_score,
                'matches': best_result['total_matches'],
                'success': True
            })
        else:
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÑ‡∏î‡πâ")
            results_summary.append({
                'test': description,
                'detector': 'None',
                'score': 0,
                'matches': 0,
                'success': False
            })

    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("=" * 60)
    print(f"{'‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö':<20} {'Detector':<8} {'Score':<8} {'Matches':<8} {'‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå'}")
    print("-" * 60)

    success_count = 0
    for result in results_summary:
        status = "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if result['success'] else "‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        if result['success']:
            success_count += 1

        print(f"{result['test']:<20} {result['detector']:<8} {result['score']:<8.2f} "
              f"{result['matches']:<8} {status}")

    print("-" * 60)
    print(f"‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{len(results_summary)} "
          f"({success_count/len(results_summary)*100:.1f}%)")

    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    print("\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    print("1. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå demo_results/")
    print("2. ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå matches_visualization.jpg ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà features")
    print("3. ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå comparison.jpg ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£ transform")
    print("4. Score ‚â• 0.5 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    print("5. Score ‚â• 0.7 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á")

    print("\nüìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:")
    print("‚Ä¢ SIFT: ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡∏ä‡πâ‡∏≤")
    print("‚Ä¢ ORB: ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
    print("‚Ä¢ AKAZE: ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")

    print("\nüéÆ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
    print("python cli.py --eye your_eye_level.jpg --top your_top_down.jpg")
    print("python cli.py --benchmark  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å detectors")


def explain_theory():
    """
    ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏§‡∏©‡∏é‡∏µ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
    """
    print("\n" + "=" * 60)
    print("üìñ ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á OpenCV Homography Matching")
    print("=" * 60)

    print("\nüîç 1. Feature Detection (‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Features)")
    print("   ‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô‡πÉ‡∏ô‡∏†‡∏≤‡∏û (corners, edges, blobs)")
    print("   ‚Ä¢ ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏à‡∏∞‡∏°‡∏µ descriptor ‡∏ó‡∏µ‡πà‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô")
    print("   ‚Ä¢ SIFT, ORB, AKAZE ‡πÄ‡∏õ‡πá‡∏ô algorithms ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏≤ features")

    print("\nüîó 2. Feature Matching (‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà Features)")
    print("   ‚Ä¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö descriptors ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏û")
    print("   ‚Ä¢ ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    print("   ‚Ä¢ ‡∏Å‡∏£‡∏≠‡∏á matches ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏≠‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Lowe's ratio test")

    print("\nüìê 3. Homography Estimation")
    print("   ‚Ä¢ ‡πÉ‡∏ä‡πâ matches ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì transformation matrix")
    print("   ‚Ä¢ Homography ‡πÄ‡∏õ‡πá‡∏ô matrix 3x3 ‡∏ó‡∏µ‡πà‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û")
    print("   ‚Ä¢ ‡πÉ‡∏ä‡πâ RANSAC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á outliers")

    print("\nüéØ 4. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    print("   ‚Ä¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô")
    print("   ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏†‡∏≤‡∏û")
    print("   ‚Ä¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á panorama")
    print("   ‚Ä¢ Augmented Reality")
    print("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏û")


if __name__ == "__main__":
    simple_demo()
    explain_theory()
